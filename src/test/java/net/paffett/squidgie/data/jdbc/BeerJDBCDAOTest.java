package net.paffett.squidgie.data.jdbc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.sql.DataSource;

import net.paffett.squidgie.data.BeerDAO;
import net.paffett.squidgie.domain.Beer;
import net.paffett.squidgie.domain.Brewery;

import org.apache.commons.dbcp.BasicDataSource;
import org.dbunit.DataSourceDatabaseTester;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class BeerJDBCDAOTest {

	private BeerDAO beerDAO = null;
	DataSourceDatabaseTester dbTester = null;
	DataSource datasource = null;

	@Before
	public void setUp() throws Exception {
		
		datasource = getDataSource();
		createDatabase(datasource);
		dbTester = new DataSourceDatabaseTester(datasource);
		IDataSet dataSet = getDataSet();
		dbTester.setDataSet(dataSet);
		dbTester.onSetup();

		beerDAO = new BeerJDBCDAO(datasource);
	}

	@After
	public void tearDown() throws Exception {

	}

	protected DataSource getDataSource() {
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		dataSource.setUrl("jdbc:hsqldb:mem:tasters");
		dataSource.setUsername("sa");
		dataSource.setPassword("");

		return dataSource;
	}

	@Test
	public void testAdd() {
		Beer beer = new Beer();
		Brewery brewery = new Brewery();
		brewery.setId(1);
		beer.setName("Headwater Pale Ale");
		beer.setBrewery(brewery);
		beer.setStyle("10A");
		beer.setDescription("This is a description");

		Beer beerAdded = beerDAO.add(beer);

		assertEquals(beer.getName(), beerAdded.getName());
		assertEquals(beer.getBrewery(), beerAdded.getBrewery());
		assertEquals(beer.getStyle(), beerAdded.getStyle());
		assertEquals(beer.getDescription(), beerAdded.getDescription());
		assertNotNull(beer.getId());
	}

	@Test
	public void testFindByName() {
		String name = "Headwater Pale Ale";
		Beer beer = beerDAO.findByName(name);
		assertEquals(beer.getName(), name);
	}

	protected IDataSet getDataSet() throws Exception {
		return new FlatXmlDataSetBuilder().build(new FileInputStream(
				"src/test/resources/dataset.xml"));
	}

	private void createDatabase(DataSource ds) {
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			conn = ds.getConnection();

			 ps = conn
					.prepareStatement("CREATE TABLE beers ( beer_id BIGINT GENERATED BY DEFAULT AS IDENTITY "
                                                        + " (START WITH 1, INCREMENT BY 1) PRIMARY KEY, "
							                            + " name VARCHAR(100) NOT NULL, "
							                            + " brewery BIGINT,"
						 	                            + " style VARCHAR(3), "
							                            + " description VARCHAR(500), "
							                            + " image_id BIGINT)");
			ps.executeUpdate();
			conn.commit();

		} catch (SQLException se) {
			se.printStackTrace();
			if (conn != null) {
				try {
					conn.rollback();
				} catch (SQLException excep) {
					excep.printStackTrace();
				}
			}
		} finally {
			if (ps != null) {
				try {
					ps.close();
					conn.close();
				} catch (SQLException excep) {
					excep.printStackTrace();
				}
			}
		}

	}

	protected DatabaseOperation getSetUpOperation() throws Exception {
		return DatabaseOperation.CLEAN_INSERT;
	}

	protected DatabaseOperation getTearDownOperation() throws Exception {
		return DatabaseOperation.DELETE_ALL;
	}

}
